@inherits LayoutComponentBase
@using Microsoft.Extensions.Logging
@using com.usagemeter.androidapp.Services
@using com.usagemeter.androidapp.Models
@inject IRuleBlockService RuleBlockService
@inject RuleMonitorService RuleMonitorService
@inject ISettingsService SettingsService
@inject ILogger<MainLayout> Logger
@implements IDisposable

<div class="page">
    <div class="sidebar @NavMenuCssClass" @onclick="ToggleNavMenu">
        <NavMenu />
    </div>

    <main class="main-content">
        <div class="top-row px-4">
            <button class="navbar-toggler" @onclick="ToggleNavMenu" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <h1 class="page-title">📱 Usage Meter</h1>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<!-- Rule Blocking Modal -->
<RuleBlockModal IsVisible="@IsRuleBlocked"
                BlockedRule="@BlockedRule"
                CountdownSeconds="@CountdownSeconds"
                OnAcknowledge="@OnAcknowledgeRule"
                OnOpenApp="@OnOpenTargetApp" />

@code {
    private bool IsRuleBlocked = false;
    private AppRule? BlockedRule = null;
    private int CountdownSeconds = 0;
    private bool _isInitialized = false;
    private AppSettings? _settings;
    private bool _navMenuExpanded = false;

    private string? NavMenuCssClass => _navMenuExpanded ? "show" : null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("MainLayout initializing...");

            // Load settings
            _settings = await SettingsService.GetSettingsAsync();

            // Subscribe to rule block events
            RuleBlockService.RuleTriggered += OnRuleTriggered;
            RuleBlockService.RuleAcknowledged += OnRuleAcknowledged;

            // Start monitoring if enabled
            if (_settings.AllRulesEnabled)
            {
                Logger.LogInformation("Starting rule monitoring...");
                await RuleMonitorService.StartAsync();
            }

            _isInitialized = true;
            Logger.LogInformation("MainLayout initialized successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing MainLayout");
        }
    }

    private void ToggleNavMenu()
    {
        _navMenuExpanded = !_navMenuExpanded;
        StateHasChanged();
    }

    private void OnRuleTriggered(object? sender, RuleBlockEventArgs e)
    {
        try
        {
            Logger.LogInformation($"Rule triggered in MainLayout: {e.Rule.Name}");

            InvokeAsync(async () =>
            {
                BlockedRule = e.Rule;
                IsRuleBlocked = true;
                _navMenuExpanded = false; // Close nav menu

                // Get countdown duration from settings
                if (_settings != null)
                {
                    CountdownSeconds = _settings.DefaultBlockDurationMinutes * 60 + 
                                     _settings.DefaultBlockDurationSeconds;
                }
                else
                {
                    CountdownSeconds = 30; // Default fallback
                }

                StateHasChanged();

                // Force the app to come to foreground
#if ANDROID
                await ForceAppToForeground();
#endif
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling rule triggered event");
        }
    }

    private void OnRuleAcknowledged(object? sender, EventArgs e)
    {
        try
        {
            Logger.LogInformation("Rule acknowledged in MainLayout");

            InvokeAsync(() =>
            {
                IsRuleBlocked = false;
                BlockedRule = null;
                CountdownSeconds = 0;
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling rule acknowledged event");
        }
    }

    private async Task OnAcknowledgeRule()
    {
        try
        {
            Logger.LogInformation("User acknowledged rule block");
            await RuleBlockService.AcknowledgeBlock();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error acknowledging rule block");
        }
    }

    private async Task OnOpenTargetApp(string packageName)
    {
        try
        {
            Logger.LogInformation($"User requested to open target app: {packageName}");
            await RuleBlockService.OpenTargetApp(packageName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error opening target app: {packageName}");
        }
    }

#if ANDROID
    private async Task ForceAppToForeground()
    {
        try
        {
            var activity = Platform.CurrentActivity;
            if (activity != null)
            {
                // Bring activity to front
                var intent = new Android.Content.Intent(activity, typeof(MainActivity));
                intent.AddFlags(Android.Content.ActivityFlags.NewTask | 
                               Android.Content.ActivityFlags.ClearTop | 
                               Android.Content.ActivityFlags.SingleTop);
                intent.PutExtra("FORCE_FOREGROUND", true);
                
                activity.StartActivity(intent);
                Logger.LogInformation("Forced app to foreground");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error forcing app to foreground");
        }
    }
#endif

    public void Dispose()
    {
        try
        {
            Logger.LogInformation("MainLayout disposing...");

            // Unsubscribe from events
            if (RuleBlockService != null)
            {
                RuleBlockService.RuleTriggered -= OnRuleTriggered;
                RuleBlockService.RuleAcknowledged -= OnRuleAcknowledged;
            }

            Logger.LogInformation("MainLayout disposed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error disposing MainLayout");
        }
    }
}