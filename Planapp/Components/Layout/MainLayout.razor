@inherits LayoutComponentBase
@using Microsoft.Extensions.Logging
@using Planapp.Components.Layout
@using Planapp.Components.Shared
@using Planapp.Services
@using Planapp.Models
@inject IRuleBlockService RuleBlockService
@inject RuleMonitorService RuleMonitorService
@inject ILogger<MainLayout> Logger
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<RuleBlockModal IsVisible="@IsRuleBlocked"
                BlockedRule="@BlockedRule"
                CountdownSeconds="@CountdownSeconds"
                OnAcknowledge="@OnAcknowledgeRule"
                OnOpenApp="@OnOpenTargetApp" />

@code {
    private bool IsRuleBlocked = false;
    private AppRule? BlockedRule = null;
    private int CountdownSeconds = 30;
    private Timer? CountdownTimer;
    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("MainLayout initializing...");

            // Subscribe to rule block events
            RuleBlockService.RuleTriggered += OnRuleTriggered;
            RuleBlockService.RuleAcknowledged += OnRuleAcknowledged;

            // Start the rule monitoring service
            Logger.LogInformation("Starting rule monitoring service...");
            await RuleMonitorService.StartAsync();

            _isInitialized = true;
            Logger.LogInformation("MainLayout initialized successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing MainLayout");
        }
    }

    private void OnRuleTriggered(object? sender, RuleBlockEventArgs e)
    {
        try
        {
            Logger.LogInformation($"Rule triggered: {e.Rule.Name}");

            InvokeAsync(() =>
            {
                BlockedRule = e.Rule;
                IsRuleBlocked = true;

                // Set countdown based on action type
                CountdownSeconds = e.Rule.ActionType == "LockInApp" ? 30 : 15;

                // Start countdown timer
                StartCountdownTimer();

                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling rule triggered event");
        }
    }

    private void OnRuleAcknowledged(object? sender, EventArgs e)
    {
        try
        {
            Logger.LogInformation("Rule acknowledged");

            InvokeAsync(() =>
            {
                IsRuleBlocked = false;
                BlockedRule = null;
                CountdownSeconds = 30;
                StopCountdownTimer();

                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling rule acknowledged event");
        }
    }

    private void StartCountdownTimer()
    {
        StopCountdownTimer(); // Stop any existing timer

        CountdownTimer = new Timer(async _ =>
        {
            if (CountdownSeconds > 0)
            {
                CountdownSeconds--;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                // Countdown finished, auto-acknowledge
                await OnAcknowledgeRule();
            }
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private void StopCountdownTimer()
    {
        CountdownTimer?.Dispose();
        CountdownTimer = null;
    }

    private async Task OnAcknowledgeRule()
    {
        try
        {
            Logger.LogInformation("User acknowledged rule block");
            await RuleBlockService.AcknowledgeBlock();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error acknowledging rule block");
        }
    }

    private async Task OnOpenTargetApp(string packageName)
    {
        try
        {
            Logger.LogInformation($"User requested to open target app: {packageName}");
            await RuleBlockService.OpenTargetApp(packageName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error opening target app: {packageName}");
        }
    }

    public void Dispose()
    {
        try
        {
            Logger.LogInformation("MainLayout disposing...");

            // Unsubscribe from events
            RuleBlockService.RuleTriggered -= OnRuleTriggered;
            RuleBlockService.RuleAcknowledged -= OnRuleAcknowledged;

            // Stop countdown timer
            StopCountdownTimer();

            // Stop rule monitoring service
            if (_isInitialized)
            {
                _ = Task.Run(async () =>
                {
                    try
                    {
                        await RuleMonitorService.StopAsync();
                        Logger.LogInformation("Rule monitoring service stopped");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error stopping rule monitoring service");
                    }
                });
            }

            Logger.LogInformation("MainLayout disposed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error disposing MainLayout");
        }
    }
}