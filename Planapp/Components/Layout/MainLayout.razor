@inherits LayoutComponentBase
@using Microsoft.Extensions.Logging
@using com.usagemeter.androidapp.Components.Layout
@using com.usagemeter.androidapp.Components.Shared
@using com.usagemeter.androidapp.Services
@using com.usagemeter.androidapp.Models
@inject IRuleBlockService RuleBlockService
@inject RuleMonitorService RuleMonitorService
@inject ISettingsService SettingsService
@inject ILogger<MainLayout> Logger
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<RuleBlockModal IsVisible="@IsRuleBlocked"
                BlockedRule="@BlockedRule"
                CountdownSeconds="@CountdownSeconds"
                OnAcknowledge="@OnAcknowledgeRule"
                OnOpenApp="@OnOpenTargetApp" />

@code {
    private bool IsRuleBlocked = false;
    private AppRule? BlockedRule = null;
    private int CountdownSeconds = 0;
    private Timer? CountdownTimer;
    private bool _isInitialized = false;
    private AppSettings? _settings;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("MainLayout initializing...");

            // Load settings
            _settings = await SettingsService.GetSettingsAsync();

            // Subscribe to rule block events
            RuleBlockService.RuleTriggered += OnRuleTriggered;
            RuleBlockService.RuleAcknowledged += OnRuleAcknowledged;

#if ANDROID
            // Only start monitoring if on Android and settings allow it
            if (_settings.AllRulesEnabled)
            {
                // Start the foreground service for background monitoring
                Logger.LogInformation("Starting Android foreground service...");
                var foregroundService = new Planapp.Platforms.Android.AndroidForegroundService();
                await foregroundService.StartAsync();
                
                // Give the service time to start
                await Task.Delay(2000);
                
                Logger.LogInformation("Foreground service started");
            }
            else
            {
                Logger.LogInformation("Rules are disabled in settings, not starting monitor");
            }
#else
            // For non-Android platforms, start monitoring directly
            Logger.LogInformation("Starting rule monitoring service...");
            await RuleMonitorService.StartAsync();
#endif

            _isInitialized = true;
            Logger.LogInformation("MainLayout initialized successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing MainLayout - will retry");
            
            // Retry initialization after delay
            await Task.Delay(3000);
            try
            {
                await RuleMonitorService.StartAsync();
                _isInitialized = true;
                Logger.LogInformation("MainLayout initialization retry successful");
            }
            catch (Exception retryEx)
            {
                Logger.LogError(retryEx, "Failed to initialize after retry");
            }
        }
    }

    private void OnRuleTriggered(object? sender, RuleBlockEventArgs e)
    {
        try
        {
            Logger.LogInformation($"Rule triggered: {e.Rule.Name}");

            InvokeAsync(async () =>
            {
                BlockedRule = e.Rule;
                IsRuleBlocked = true;

                // Get settings for countdown duration
                if (_settings != null)
                {
                    if (_settings.BlockingMode == "Timer")
                    {
                        CountdownSeconds = _settings.DefaultBlockDurationMinutes * 60 + 
                                         _settings.DefaultBlockDurationSeconds;
                    }
                    else if (_settings.BlockingMode == "Choice")
                    {
                        CountdownSeconds = 0; // Let user choose
                    }
                    else
                    {
                        CountdownSeconds = 0; // Instant mode
                    }
                }
                else
                {
                    CountdownSeconds = 30; // Default fallback
                }

                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling rule triggered event");
        }
    }

    private void OnRuleAcknowledged(object? sender, EventArgs e)
    {
        try
        {
            Logger.LogInformation("Rule acknowledged");

            InvokeAsync(() =>
            {
                IsRuleBlocked = false;
                BlockedRule = null;
                CountdownSeconds = 0;
                StopCountdownTimer();

                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling rule acknowledged event");
        }
    }

    private void StopCountdownTimer()
    {
        CountdownTimer?.Dispose();
        CountdownTimer = null;
    }

    private async Task OnAcknowledgeRule()
    {
        try
        {
            Logger.LogInformation("User acknowledged rule block");
            await RuleBlockService.AcknowledgeBlock();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error acknowledging rule block");
        }
    }

    private async Task OnOpenTargetApp(string packageName)
    {
        try
        {
            Logger.LogInformation($"User requested to open target app: {packageName}");
            await RuleBlockService.OpenTargetApp(packageName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error opening target app: {packageName}");
        }
    }

    public void Dispose()
    {
        try
        {
            Logger.LogInformation("MainLayout disposing...");

            // Unsubscribe from events
            RuleBlockService.RuleTriggered -= OnRuleTriggered;
            RuleBlockService.RuleAcknowledged -= OnRuleAcknowledged;

            // Stop countdown timer
            StopCountdownTimer();

            // Note: We don't stop the monitoring service here as it should
            // continue running in the background via the foreground service

            Logger.LogInformation("MainLayout disposed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error disposing MainLayout");
        }
    }
}