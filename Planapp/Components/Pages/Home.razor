@page "/"
@inject com.usagemeter.androidapp.Services.IRuleService RuleService
@inject com.usagemeter.androidapp.Services.IUsageStatsService UsageStatsService
@inject com.usagemeter.androidapp.Services.ISettingsService SettingsService
@inject com.usagemeter.androidapp.Services.RuleMonitorService RuleMonitorService
@inject NavigationManager Navigation
@using com.usagemeter.androidapp.Services
@using com.usagemeter.androidapp.Models
@implements IDisposable

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1 class="dashboard-title">📱 Usage Dashboard</h1>
        <p class="dashboard-subtitle">@GetGreeting()</p>
    </div>

    @if (DeviceInfo.Platform == DevicePlatform.Android)
    {
        <!-- Permission Status Section -->
        <div class="permissions-section">
            <h2 class="section-title">🔐 Required Permissions</h2>
            
            <div class="permission-cards">
                <!-- Usage Stats Permission -->
                <div class="permission-card @(HasUsagePermission ? "granted" : "denied")">
                    <div class="permission-icon">@(HasUsagePermission ? "✅" : "❌")</div>
                    <div class="permission-content">
                        <h3>Usage Statistics</h3>
                        <p>@(HasUsagePermission ? "Granted - Can track app usage" : "Required to monitor app usage")</p>
                        @if (!HasUsagePermission)
                        {
                            <button class="btn-permission" @onclick="RequestUsagePermission">Grant Permission</button>
                        }
                    </div>
                </div>

                <!-- Overlay Permission -->
                <div class="permission-card @(HasOverlayPermission ? "granted" : "denied")">
                    <div class="permission-icon">@(HasOverlayPermission ? "✅" : "❌")</div>
                    <div class="permission-content">
                        <h3>Display Over Apps</h3>
                        <p>@(HasOverlayPermission ? "Granted - Can show blocking screen" : "Required to enforce rules over other apps")</p>
                        @if (!HasOverlayPermission)
                        {
                            <button class="btn-permission" @onclick="RequestOverlayPermission">Grant Permission</button>
                        }
                    </div>
                </div>

                <!-- Notification Permission -->
                <div class="permission-card @(HasNotificationPermission ? "granted" : "denied")">
                    <div class="permission-icon">@(HasNotificationPermission ? "✅" : "⚠️")</div>
                    <div class="permission-content">
                        <h3>Notifications</h3>
                        <p>@(HasNotificationPermission ? "Granted - Can show alerts" : "Recommended for rule notifications")</p>
                        @if (!HasNotificationPermission)
                        {
                            <button class="btn-permission" @onclick="RequestNotificationPermission">Grant Permission</button>
                        }
                    </div>
                </div>
            </div>

            @if (!HasUsagePermission || !HasOverlayPermission)
            {
                <div class="permission-warning">
                    <div class="warning-icon">⚠️</div>
                    <div class="warning-content">
                        <h3>Permissions Required</h3>
                        <p>Usage Meter needs these permissions to function properly. Without them, the app cannot monitor usage or block apps when limits are reached.</p>
                    </div>
                </div>
            }
        </div>

        <!-- Service Status -->
        <div class="service-status">
            <h2 class="section-title">⚙️ Service Status</h2>
            <div class="status-cards">
                <div class="status-card @(IsMonitoringActive ? "active" : "inactive")">
                    <div class="status-icon">@(IsMonitoringActive ? "🟢" : "🔴")</div>
                    <div class="status-content">
                        <h3>Background Monitoring</h3>
                        <p>@(IsMonitoringActive ? "Active - Monitoring app usage in background" : "Inactive - Background service not running")</p>
                        @if (!IsMonitoringActive && HasUsagePermission && HasOverlayPermission && Settings?.AllRulesEnabled == true)
                        {
                            <button class="btn-start-monitoring" @onclick="StartBackgroundService">Start Background Service</button>
                        }
                        else if (!HasUsagePermission || !HasOverlayPermission)
                        {
                            <p class="requirement-text">Requires all permissions to be granted</p>
                        }
                        else if (Settings?.AllRulesEnabled != true)
                        {
                            <p class="requirement-text">Rules are disabled in settings</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (HasUsagePermission)
        {
            <div class="stats-grid">
                <div class="stat-card primary">
                    <div class="stat-icon">📊</div>
                    <div class="stat-content">
                        <div class="stat-value">@(TodayUsage != null ? FormatTime(TodayUsage.Value) : "--")</div>
                        <div class="stat-label">Today's Screen Time</div>
                    </div>
                </div>

                <div class="stat-card secondary">
                    <div class="stat-icon">📋</div>
                    <div class="stat-content">
                        <div class="stat-value">@ActiveRulesCount</div>
                        <div class="stat-label">Active Rules</div>
                    </div>
                </div>

                <div class="stat-card accent">
                    <div class="stat-icon">📱</div>
                    <div class="stat-content">
                        <div class="stat-value">@AppsMonitored</div>
                        <div class="stat-label">Apps Monitored</div>
                    </div>
                </div>

                <div class="stat-card success">
                    <div class="stat-icon">✅</div>
                    <div class="stat-content">
                        <div class="stat-value">@(Settings?.AllRulesEnabled == true ? "ON" : "OFF")</div>
                        <div class="stat-label">Protection Status</div>
                    </div>
                </div>
            </div>

            @if (TopApps != null && TopApps.Count > 0)
            {
                <div class="section-card">
                    <h2 class="section-title">🏆 Most Used Apps Today</h2>
                    <div class="top-apps-list">
                        @foreach (var app in TopApps.Take(5))
                        {
                            <div class="top-app-item">
                                <div class="app-rank">#@(TopApps.IndexOf(app) + 1)</div>
                                <div class="app-info">
                                    <span class="app-name">@app.AppName</span>
                                    <span class="app-usage">@FormatTime(app.TotalTimeInForeground)</span>
                                </div>
                                <div class="usage-bar">
                                    <div class="usage-fill" style="width: @GetUsagePercentage(app)%"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }

        <div class="quick-actions">
            <h2 class="section-title">⚡ Quick Actions</h2>
            <div class="action-buttons">
                <button class="action-btn" @onclick='() => Navigation.NavigateTo("/rules/edit/new")'>
                    <span class="action-icon">➕</span>
                    <span>Create Rule</span>
                </button>
                <button class="action-btn" @onclick='() => Navigation.NavigateTo("/android-usage")'>
                    <span class="action-icon">📊</span>
                    <span>View Usage</span>
                </button>
                <button class="action-btn" @onclick='() => Navigation.NavigateTo("/settings")'>
                    <span class="action-icon">⚙️</span>
                    <span>Settings</span>
                </button>
                <button class="action-btn" @onclick="RefreshData">
                    <span class="action-icon">🔄</span>
                    <span>Refresh</span>
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="platform-notice">
            <div class="notice-icon">📱</div>
            <h2>Android Device Required</h2>
            <p>This app is designed specifically for Android devices to help manage app usage and screen time.</p>
            <p>The main features (Rules and App Usage tracking) require Android's usage statistics API.</p>
        </div>
    }
</div>

@code {
    private bool HasUsagePermission = false;
    private bool HasOverlayPermission = false;
    private bool HasNotificationPermission = false;
    private bool IsMonitoringActive = false;
    private long? TodayUsage;
    private int ActiveRulesCount = 0;
    private int AppsMonitored = 0;
    private List<AppUsageInfo>? TopApps;
    private List<AppRule>? ActiveRules;
    private AppSettings? Settings;
    private Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        
        // Auto-start background service if conditions are met
        await AutoStartBackgroundService();
        
        // Refresh permissions and service status every 5 seconds
        _refreshTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await CheckPermissions();
                await CheckServiceStatus();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10));
    }

    private async Task LoadDashboardData()
    {
        try
        {
            Settings = await SettingsService.GetSettingsAsync();
            await CheckPermissions();
            await CheckServiceStatus();
            
            if (HasUsagePermission)
            {
                var apps = await UsageStatsService.GetAppUsageAsync();
                TopApps = apps.OrderByDescending(a => a.TotalTimeInForeground).ToList();
                TodayUsage = apps.Sum(a => a.TotalTimeInForeground);

                var allRules = await RuleService.GetRulesAsync();
                ActiveRules = allRules.Where(r => r.IsEnabled && Settings.AllRulesEnabled).ToList();
                ActiveRulesCount = ActiveRules.Count;

                var monitoredPackages = new HashSet<string>();
                foreach (var rule in ActiveRules)
                {
                    foreach (var pkg in rule.SelectedPackages)
                    {
                        monitoredPackages.Add(pkg);
                    }
                }
                AppsMonitored = monitoredPackages.Count;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading dashboard data: {ex}");
        }
    }

    private async Task CheckPermissions()
    {
        try
        {
#if ANDROID
            HasUsagePermission = UsageStatsService.HasUsagePermission();
            
            // Check overlay permission
            var context = Platform.CurrentActivity?.ApplicationContext ?? global::Android.App.Application.Context;
            if (context != null && global::Android.OS.Build.VERSION.SdkInt >= global::Android.OS.BuildVersionCodes.M)
            {
                HasOverlayPermission = global::Android.Provider.Settings.CanDrawOverlays(context);
            }
            else
            {
                HasOverlayPermission = true; // Older Android versions don't need this
            }

            // Check notification permission
            if (global::Android.OS.Build.VERSION.SdkInt >= global::Android.OS.BuildVersionCodes.Tiramisu)
            {
                HasNotificationPermission = com.usagemeter.androidapp.Platforms.Android.AndroidNotificationHelper.CheckNotificationPermission();
            }
            else
            {
                HasNotificationPermission = true; // Older versions don't need explicit permission
            }
#endif
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error checking permissions: {ex}");
        }
    }

    private async Task CheckServiceStatus()
    {
        try
        {
            // Check if monitoring is active by looking at the service
            var appLaunchMonitor = IPlatformApplication.Current?.Services?.GetService<Services.IAppLaunchMonitor>();
            IsMonitoringActive = appLaunchMonitor?.IsMonitoring == true;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error checking service status: {ex}");
            IsMonitoringActive = false;
        }
    }

    private async Task AutoStartBackgroundService()
    {
        try
        {
            if (HasUsagePermission && HasOverlayPermission && Settings?.AllRulesEnabled == true && !IsMonitoringActive)
            {
                System.Diagnostics.Debug.WriteLine("Auto-starting background service...");
                await StartBackgroundService();
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error auto-starting background service: {ex}");
        }
    }

    private async Task StartBackgroundService()
    {
        try
        {
            if (!HasUsagePermission || !HasOverlayPermission)
            {
                System.Diagnostics.Debug.WriteLine("Cannot start service - missing permissions");
                return;
            }

            if (Settings?.AllRulesEnabled != true)
            {
                System.Diagnostics.Debug.WriteLine("Cannot start service - rules disabled");
                return;
            }

#if ANDROID
            // Start the foreground service
            await com.usagemeter.androidapp.Platforms.Android.AndroidForegroundService.StartAsync();
            
            // Give it a moment to start
            await Task.Delay(2000);
            
            // Check if it actually started
            await CheckServiceStatus();
            
            if (IsMonitoringActive)
            {
                System.Diagnostics.Debug.WriteLine("Background service started successfully");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Background service failed to start");
            }
#endif
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error starting background service: {ex}");
        }
    }

    private void RequestUsagePermission()
    {
        UsageStatsService.RequestUsageAccess();
    }

    private async Task RequestOverlayPermission()
    {
#if ANDROID
        try
        {
            var context = Platform.CurrentActivity?.ApplicationContext ?? global::Android.App.Application.Context;
            if (context != null)
            {
                var intent = new global::Android.Content.Intent(global::Android.Provider.Settings.ActionManageOverlayPermission);
                intent.SetData(global::Android.Net.Uri.Parse($"package:{context.PackageName}"));
                intent.AddFlags(global::Android.Content.ActivityFlags.NewTask);
                context.StartActivity(intent);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error requesting overlay permission: {ex}");
        }
#endif
    }

    private void RequestNotificationPermission()
    {
#if ANDROID
        com.usagemeter.androidapp.Platforms.Android.AndroidNotificationHelper.RequestNotificationPermission();
#endif
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
        StateHasChanged();
    }

    private string GetGreeting()
    {
        var hour = DateTime.Now.Hour;
        if (hour < 12) return "Good morning! Let's make today productive.";
        if (hour < 17) return "Good afternoon! Stay focused on what matters.";
        if (hour < 21) return "Good evening! Time to wind down.";
        return "Good night! Consider taking a break from screens.";
    }

    private string FormatTime(long milliseconds)
    {
        if (milliseconds <= 0) return "0m";

        var time = TimeSpan.FromMilliseconds(milliseconds);
        var parts = new List<string>();

        if (time.TotalDays >= 1)
        {
            var days = (int)time.TotalDays;
            parts.Add($"{days}d");
            time = time.Subtract(TimeSpan.FromDays(days));
        }

        if (time.Hours > 0) parts.Add($"{time.Hours}h");
        if (time.Minutes > 0) parts.Add($"{time.Minutes}m");
        if (parts.Count == 0 && time.Seconds > 0) parts.Add($"{time.Seconds}s");

        return parts.Count > 0 ? string.Join(" ", parts) : "0m";
    }

    private double GetUsagePercentage(AppUsageInfo app)
    {
        if (TodayUsage == null || TodayUsage == 0) return 0;
        return (app.TotalTimeInForeground / (double)TodayUsage) * 100;
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}