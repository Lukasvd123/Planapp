@page "/android-usage"
@inject com.usagemeter.androidapp.Services.IUsageStatsService UsageStatsService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Rendering
@using System.Collections.Concurrent

<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Modern Header with Glass Effect -->
        <div class="text-center mb-12">
            <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl mb-6 shadow-lg">
                <span class="text-2xl">📱</span>
            </div>
            <h1 class="text-4xl sm:text-5xl font-bold bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 bg-clip-text text-transparent mb-4">
                App Usage Analytics
            </h1>
            <p class="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
                Discover your digital habits with beautiful insights and smart analytics
            </p>
        </div>

        @if (!HasPermission)
        {
            <!-- Permission Required - Modern Card Design -->
            <div class="max-w-2xl mx-auto mb-12">
                <div class="relative overflow-hidden bg-white rounded-3xl shadow-2xl border border-gray-100">
                    <div class="absolute inset-0 bg-gradient-to-br from-blue-50 via-white to-purple-50"></div>
                    <div class="relative p-8 sm:p-12 text-center">
                        <div class="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full mb-6 shadow-lg">
                            <span class="text-3xl">🔒</span>
                        </div>
                        <h3 class="text-2xl font-bold text-gray-900 mb-4">Permission Required</h3>
                        <p class="text-gray-600 mb-8 text-lg leading-relaxed">
                            To unlock your usage insights, please grant access to usage statistics in your device settings.
                        </p>
                        <button class="inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-2xl hover:shadow-xl hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-blue-300" @onclick="OpenSettings">
                            <span class="text-xl">⚙️</span>
                            <span>Grant Permission</span>
                        </button>
                    </div>
                </div>
            </div>
        }
        else if (AppUsages == null)
        {
            <!-- Loading State - Modern Skeleton -->
            <div class="max-w-2xl mx-auto">
                <div class="bg-white rounded-3xl shadow-xl p-8 text-center">
                    <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full mb-6">
                        <div class="w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">Analyzing Your Usage</h3>
                    <p class="text-gray-600">Please wait while we gather your app insights...</p>
                </div>
            </div>
        }
        else if (AppUsages.Count == 0)
        {
            <!-- No Data State -->
            <div class="max-w-2xl mx-auto">
                <div class="bg-white rounded-3xl shadow-xl p-12 text-center">
                    <div class="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full mb-6">
                        <span class="text-3xl">📊</span>
                    </div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-4">No Usage Data Available</h3>
                    <p class="text-gray-600 mb-8">We couldn't find any app usage data. This might happen because:</p>
                    <div class="text-left max-w-md mx-auto mb-8">
                        <div class="space-y-3">
                            <div class="flex items-center gap-3">
                                <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                                <span class="text-gray-600">No apps were used recently</span>
                            </div>
                            <div class="flex items-center gap-3">
                                <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                                <span class="text-gray-600">Usage statistics are still being collected</span>
                            </div>
                            <div class="flex items-center gap-3">
                                <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                                <span class="text-gray-600">Permission was recently granted</span>
                            </div>
                        </div>
                    </div>
                    <button class="inline-flex items-center gap-2 px-6 py-3 bg-gray-900 text-white font-semibold rounded-xl hover:bg-gray-800 transition-colors duration-200" @onclick="RefreshData">
                        <span>🔄</span>
                        <span>Refresh Data</span>
                    </button>
                </div>
            </div>
        }
        else
        {
            <!-- Stats Overview - Modern Dashboard Cards -->
            <div class="grid grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
                <div class="relative overflow-hidden bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-6">
                    <div class="absolute inset-0 bg-gradient-to-br from-blue-50 to-blue-100 opacity-50"></div>
                    <div class="relative">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-2xl">📱</span>
                            <div class="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                                <span class="text-white text-sm font-bold">@AppUsages.Count</span>
                            </div>
                        </div>
                        <div class="text-2xl font-bold text-gray-900 mb-1">@AppUsages.Count</div>
                        <div class="text-sm text-gray-600">Apps Tracked</div>
                    </div>
                </div>

                <div class="relative overflow-hidden bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-6">
                    <div class="absolute inset-0 bg-gradient-to-br from-purple-50 to-purple-100 opacity-50"></div>
                    <div class="relative">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-2xl">⏱️</span>
                            <div class="w-8 h-8 bg-purple-500 rounded-lg"></div>
                        </div>
                        <div class="text-2xl font-bold text-gray-900 mb-1">@FormatTimeShort(AppUsages.Sum(a => a.TotalTimeInForeground))</div>
                        <div class="text-sm text-gray-600">Total Screen Time</div>
                    </div>
                </div>

                <div class="relative overflow-hidden bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-6">
                    <div class="absolute inset-0 bg-gradient-to-br from-green-50 to-green-100 opacity-50"></div>
                    <div class="relative">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-2xl">🎯</span>
                            <div class="w-8 h-8 bg-green-500 rounded-lg"></div>
                        </div>
                        <div class="text-2xl font-bold text-gray-900 mb-1">@AppUsages.Count(a => a.TotalTimeInForeground > 0)</div>
                        <div class="text-sm text-gray-600">Apps Used Today</div>
                    </div>
                </div>

                <div class="relative overflow-hidden bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-6">
                    <div class="absolute inset-0 bg-gradient-to-br from-orange-50 to-orange-100 opacity-50"></div>
                    <div class="relative">
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-2xl">✨</span>
                            <div class="w-8 h-8 bg-orange-500 rounded-lg"></div>
                        </div>
                        <div class="text-2xl font-bold text-gray-900 mb-1">@(AppUsages.Where(a => a.TotalTimeInForeground > 0).Count() > 0 ? "Active" : "Idle")</div>
                        <div class="text-sm text-gray-600">Status</div>
                    </div>
                </div>
            </div>

            <!-- Controls - Modern Filter Bar -->
            <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
                <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-6">
                    <div class="flex items-center gap-4">
                        <h2 class="text-2xl font-bold text-gray-900 flex items-center gap-3">
                            <span class="text-3xl">📈</span>
                            <span>App Usage Breakdown</span>
                        </h2>
                    </div>
                    
                    <div class="flex items-center gap-6">
                        <!-- Filter Toggle with Modern Switch -->
                        <label class="flex items-center gap-3 cursor-pointer group">
                            <span class="text-sm font-medium text-gray-700">Show only used apps</span>
                            <div class="relative">
                                <input type="checkbox" 
                                       class="sr-only" 
                                       @onchange="OnFilterChanged" 
                                       checked="@ShowOnlyUsedApps" />
                                <div class="w-11 h-6 bg-gray-200 rounded-full shadow-inner transition-colors duration-200 @(ShowOnlyUsedApps ? "bg-blue-500" : "")"></div>
                                <div class="absolute w-4 h-4 bg-white rounded-full shadow transition-transform duration-200 top-1 @(ShowOnlyUsedApps ? "translate-x-6 left-1" : "left-1")"></div>
                            </div>
                        </label>
                        
                        <!-- Refresh Button -->
                        <button class="inline-flex items-center gap-2 px-4 py-2 bg-gray-900 text-white font-semibold rounded-xl hover:bg-gray-800 transition-colors duration-200 disabled:opacity-50" @onclick="RefreshData" disabled="@IsRefreshing">
                            <span class="@(IsRefreshing ? "animate-spin" : "")">🔄</span>
                            <span>@(IsRefreshing ? "Refreshing..." : "Refresh")</span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Apps Grid - Modern Card Layout -->
            @{
                var totalTime = FilteredApps.Sum(a => a.TotalTimeInForeground);
                var maxToShow = 100;
            }
            
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6 mb-8">
                @for (int i = 0; i < Math.Min(FilteredApps.Count, maxToShow); i++)
                {
                    var app = FilteredApps[i];
                    var percentage = totalTime > 0 ? (double)app.TotalTimeInForeground / totalTime * 100 : 0;
                    var isTopApp = i < 3 && app.TotalTimeInForeground > 0;
                    
                    <div class="group relative overflow-hidden bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 @(isTopApp ? "ring-2 ring-yellow-400 bg-gradient-to-br from-yellow-50 to-orange-50" : "")" 
                         @key="app.PackageName">
                        
                        @if (isTopApp)
                        {
                            <div class="absolute top-3 right-3 z-10">
                                <div class="w-8 h-8 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center shadow-lg">
                                    <span class="text-white text-sm font-bold">@(i + 1)</span>
                                </div>
                            </div>
                        }

                        <div class="p-6">
                            <!-- App Icon -->
                            <div class="flex justify-center mb-4">
                                <div class="relative">
                                    <LazyAppIcon PackageName="@app.PackageName" 
                                                AppName="@app.AppName" 
                                                Size="64" 
                                                EnableLazyLoading="true"
                                                ShowBadge="false" />
                                </div>
                            </div>
                            
                            <!-- App Details -->
                            <div class="text-center mb-4">
                                <h3 class="font-bold text-gray-900 text-lg mb-1 line-clamp-2" title="@app.AppName">@app.AppName</h3>
                                <p class="text-xs text-gray-500 truncate" title="@app.PackageName">@app.PackageName</p>
                            </div>
                            
                            <!-- Usage Stats -->
                            <div class="space-y-4">
                                <div class="text-center">
                                    <div class="text-3xl font-bold text-gray-900 mb-1">@FormatTime(app.TotalTimeInForeground)</div>
                                    @if (app.TotalTimeInForeground > 0)
                                    {
                                        <div class="text-sm text-gray-600 mb-3">@percentage.ToString("F1")% of total time</div>
                                        
                                        <!-- Modern Progress Bar -->
                                        <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
                                            <div class="h-full rounded-full transition-all duration-500 @GetProgressColorClass(percentage)" 
                                                 style="width: @Math.Max(percentage, 2)%"></div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-sm text-gray-500 mb-3">Not used today</div>
                                        <div class="w-full bg-gray-200 rounded-full h-2">
                                            <div class="h-full bg-gray-200 rounded-full"></div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            @if (FilteredApps.Count > maxToShow)
            {
                <div class="bg-white rounded-2xl shadow-lg p-8 text-center">
                    <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full mb-4">
                        <span class="text-2xl">📱</span>
                    </div>
                    <h3 class="text-xl font-bold text-gray-900 mb-2">@(FilteredApps.Count - maxToShow) more apps</h3>
                    <p class="text-gray-600">Showing top @maxToShow apps with usage data</p>
                </div>
            }
        }
    </div>
</div>

<style>
.animate-spin {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.max-w-7xl {
    max-width: 80rem;
}

.mx-auto {
    margin-left: auto;
    margin-right: auto;
}

/* Modern glassmorphism effect */
.backdrop-blur {
    backdrop-filter: blur(8px);
}

/* Custom animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out;
}

/* Modern gradient text */
.bg-clip-text {
    -webkit-background-clip: text;
    background-clip: text;
}

/* Responsive grid improvements */
@media (max-width: 640px) {
    .grid-cols-2 {
        grid-template-columns: repeat(1, minmax(0, 1fr));
    }
}

@media (max-width: 768px) {
    .lg\:grid-cols-3 {
        grid-template-columns: repeat(2, minmax(0, 1fr));
    }
}
</style>

@code {
    private List<com.usagemeter.androidapp.Services.AppUsageInfo>? AppUsages;
    private List<com.usagemeter.androidapp.Services.AppUsageInfo> FilteredApps = new();
    private bool HasPermission = false;
    private bool IsRefreshing = false;
    private bool ShowOnlyUsedApps = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        HasPermission = UsageStatsService.HasUsagePermission();
        if (HasPermission)
        {
            AppUsages = await UsageStatsService.GetAppUsageAsync();
            System.Diagnostics.Debug.WriteLine($"Loaded {AppUsages?.Count ?? 0} apps from service");
            FilterApps();
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No usage permission granted");
        }
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        ShowOnlyUsedApps = (bool)(e.Value ?? false);
        FilterApps();
    }

    private void FilterApps()
    {
        if (AppUsages == null) return;

        FilteredApps = ShowOnlyUsedApps 
            ? AppUsages.Where(a => a.TotalTimeInForeground > 0).ToList()
            : AppUsages;
        
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        IsRefreshing = true;
        AppUsages = null;
        FilteredApps.Clear();
        StateHasChanged();
        
        await Task.Delay(500);
        await LoadData();
        IsRefreshing = false;
        StateHasChanged();
    }

    void OpenSettings()
    {
        UsageStatsService.RequestUsageAccess();
    }

    string GetProgressColorClass(double percentage)
    {
        return percentage switch
        {
            >= 30 => "bg-gradient-to-r from-red-500 to-red-600",
            >= 15 => "bg-gradient-to-r from-orange-500 to-orange-600", 
            >= 5 => "bg-gradient-to-r from-blue-500 to-blue-600",
            _ => "bg-gradient-to-r from-green-500 to-green-600"
        };
    }

    string FormatTime(long milliseconds)
    {
        if (milliseconds <= 0) return "0s";
        
        var time = TimeSpan.FromMilliseconds(milliseconds);
        var parts = new List<string>();
        
        if (time.TotalDays >= 1)
        {
            var days = (int)time.TotalDays;
            parts.Add($"{days}d");
            time = time.Subtract(TimeSpan.FromDays(days));
        }
        
        if (time.Hours > 0) parts.Add($"{time.Hours}h");
        if (time.Minutes > 0) parts.Add($"{time.Minutes}m");
        if (time.Seconds > 0 && parts.Count == 0) parts.Add($"{time.Seconds}s");
        
        return parts.Count > 0 ? string.Join(" ", parts) : "0s";
    }

    string FormatTimeShort(long milliseconds)
    {
        if (milliseconds <= 0) return "0s";
        
        var time = TimeSpan.FromMilliseconds(milliseconds);
        
        if (time.TotalHours >= 1)
            return $"{time.TotalHours:F1}h";
        else if (time.TotalMinutes >= 1)
            return $"{(int)time.TotalMinutes}m";
        else
            return $"{(int)time.TotalSeconds}s";
    }
}