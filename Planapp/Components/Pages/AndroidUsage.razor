@page "/android-usage"
@inject Planapp.Services.IUsageStatsService UsageStatsService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Rendering
@using System.Collections.Concurrent

<div class="page-header">
    <h1>📱 App Usage Statistics</h1>
    <p class="page-subtitle">Track your daily app usage and screen time</p>
</div>

@if (!HasPermission)
{
    <div class="permission-card">
        <div class="permission-icon">🔒</div>
        <div class="permission-content">
            <h3>Permission Required</h3>
            <p>To view your app usage statistics, please grant access to usage data in your device settings.</p>
            <button class="btn btn-primary" @onclick="OpenSettings">
                <span class="btn-icon">⚙️</span>
                Grant Permission
            </button>
        </div>
    </div>
}
else if (AppUsages == null)
{
    <div class="loading-card">
        <div class="loading-spinner"></div>
        <h3>Loading your usage data...</h3>
        <p>This may take a moment</p>
    </div>
}
else if (AppUsages.Count == 0)
{
    <div class="no-data-card">
        <div class="no-data-icon">📊</div>
        <h3>No Usage Data Available</h3>
        <p>We couldn't find any app usage data. This might happen because:</p>
        <ul>
            <li>No apps were used recently</li>
            <li>Usage statistics are still being collected</li>
            <li>Permission was recently granted</li>
        </ul>
        <button class="btn btn-secondary" @onclick="RefreshData">
            <span class="btn-icon">🔄</span>
            Refresh Data
        </button>
    </div>
}
else
{
    <div class="stats-overview">
        <div class="stat-card">
            <div class="stat-number">@AppUsages.Count</div>
            <div class="stat-label">Apps Tracked</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@FormatTimeShort(AppUsages.Sum(a => a.TotalTimeInForeground))</div>
            <div class="stat-label">Total Screen Time</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">@AppUsages.Count(a => a.TotalTimeInForeground > 0)</div>
            <div class="stat-label">Apps Used Today</div>
        </div>
    </div>

    @* Debug info - remove in production *@
    @if (AppUsages != null && AppUsages.Count > 0)
    {
        <div style="background: #f0f0f0; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 0.8rem; color: #666;">
            <strong>Debug Info:</strong> Found @AppUsages.Count apps, 
            @AppUsages.Count(a => a.TotalTimeInForeground > 0) with usage > 0ms.
            Top 3: @string.Join(", ", AppUsages.Take(3).Select(a => $"{a.AppName} ({FormatTime(a.TotalTimeInForeground)})"))
        </div>
    }

    <div class="section-header">
        <h2>📈 App Usage Breakdown</h2>
        <div class="controls">
            <label class="filter-toggle">
                <input type="checkbox" @onchange="OnFilterChanged" checked="@ShowOnlyUsedApps" />
                Show only used apps
            </label>
            <button class="btn-refresh" @onclick="RefreshData" disabled="@IsRefreshing">
                <span class="refresh-icon @(IsRefreshing ? "spinning" : "")">🔄</span>
                @(IsRefreshing ? "Refreshing..." : "Refresh")
            </button>
        </div>
    </div>

    <div class="usage-grid">
        @{
            var totalTime = FilteredApps.Sum(a => a.TotalTimeInForeground);
            var maxToShow = 100;
        }
        @foreach (var app in FilteredApps.Take(maxToShow))
        {
            var percentage = totalTime > 0 ? (double)app.TotalTimeInForeground / totalTime * 100 : 0;
            var isTopApp = FilteredApps.IndexOf(app) < 3 && app.TotalTimeInForeground > 0;
            
            <div class="usage-card @(isTopApp ? "top-app" : "")" @key="app.PackageName">
                <div class="app-header">
                    <div class="app-icon-container">
                        @RenderAppIcon(app.PackageName, app.AppName)
                        @if (isTopApp)
                        {
                            <div class="top-badge">@(FilteredApps.Where(a => a.TotalTimeInForeground > 0).ToList().IndexOf(app) + 1)</div>
                        }
                    </div>
                    <div class="app-info">
                        <h3 class="app-name" title="@app.AppName">@app.AppName</h3>
                        <p class="package-name" title="@app.PackageName">@app.PackageName</p>
                    </div>
                </div>
                
                <div class="usage-stats">
                    <div class="primary-stat">@FormatTime(app.TotalTimeInForeground)</div>
                    @if (app.TotalTimeInForeground > 0)
                    {
                        <div class="percentage-stat">@percentage.ToString("F1")% of total time</div>
                        
                        <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress-fill @GetProgressColorClass(percentage)" 
                                     style="width: @Math.Max(percentage, 2)%"></div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="percentage-stat">Not used today</div>
                    }
                </div>
            </div>
        }
        
        @if (FilteredApps.Count > maxToShow)
        {
            <div class="show-more-card">
                <div class="show-more-content">
                    <h3>@(FilteredApps.Count - maxToShow) more apps</h3>
                    <p>Showing top @maxToShow apps</p>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Planapp.Services.AppUsageInfo>? AppUsages;
    private List<Planapp.Services.AppUsageInfo> FilteredApps = new();
    private bool HasPermission = false;
    private bool IsRefreshing = false;
    private bool ShowOnlyUsedApps = true;
    private readonly ConcurrentDictionary<string, string> IconDataUrls = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        HasPermission = UsageStatsService.HasUsagePermission();
        if (HasPermission)
        {
            AppUsages = await UsageStatsService.GetAppUsageAsync();
            System.Diagnostics.Debug.WriteLine($"Loaded {AppUsages?.Count ?? 0} apps from service");
            FilterApps();
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No usage permission granted");
        }
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        ShowOnlyUsedApps = (bool)(e.Value ?? false);
        FilterApps();
    }

    private void FilterApps()
    {
        if (AppUsages == null) return;

        FilteredApps = ShowOnlyUsedApps 
            ? AppUsages.Where(a => a.TotalTimeInForeground > 0).ToList()
            : AppUsages;
        
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        IsRefreshing = true;
        AppUsages = null;
        FilteredApps.Clear();
        IconDataUrls.Clear();
        StateHasChanged();
        
        await Task.Delay(500);
        await LoadData();
        IsRefreshing = false;
        StateHasChanged();
    }

    void OpenSettings()
    {
        UsageStatsService.RequestUsageAccess();
    }

    string GetProgressColorClass(double percentage)
    {
        return percentage switch
        {
            >= 30 => "high-usage",
            >= 15 => "medium-usage", 
            >= 5 => "low-usage",
            _ => "minimal-usage"
        };
    }

    string FormatTime(long milliseconds)
    {
        if (milliseconds <= 0) return "0s";
        
        var time = TimeSpan.FromMilliseconds(milliseconds);
        var parts = new List<string>();
        
        if (time.TotalDays >= 1)
        {
            var days = (int)time.TotalDays;
            parts.Add($"{days}d");
            time = time.Subtract(TimeSpan.FromDays(days));
        }
        
        if (time.Hours > 0) parts.Add($"{time.Hours}h");
        if (time.Minutes > 0) parts.Add($"{time.Minutes}m");
        if (time.Seconds > 0 && parts.Count == 0) parts.Add($"{time.Seconds}s");
        
        return parts.Count > 0 ? string.Join(" ", parts) : "0s";
    }

    string FormatTimeShort(long milliseconds)
    {
        if (milliseconds <= 0) return "0s";
        
        var time = TimeSpan.FromMilliseconds(milliseconds);
        
        if (time.TotalHours >= 1)
            return $"{time.TotalHours:F1}h";
        else if (time.TotalMinutes >= 1)
            return $"{(int)time.TotalMinutes}m";
        else
            return $"{(int)time.TotalSeconds}s";
    }

    private RenderFragment RenderAppIcon(string packageName, string appName) => builder =>
    {
        var iconDataUrl = GetIconDataUrl(packageName);
        
        if (string.IsNullOrEmpty(iconDataUrl))
        {
            if (IsIconLoading(packageName))
            {
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "app-icon-loading");
                builder.AddContent(2, "⏳");
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "app-icon-fallback");
                builder.AddContent(2, GetAppInitial(appName));
                builder.CloseElement();
            }
        }
        else
        {
            builder.OpenElement(0, "img");
builder.AddAttribute(1, "src", iconDataUrl);
builder.AddAttribute(2, "class", "app-icon");
builder.AddAttribute(3, "width", 48);
builder.AddAttribute(4, "height", 48);
builder.AddAttribute(5, "alt", $"{appName} icon");
builder.AddAttribute(6, "loading", "lazy");
builder.CloseElement();
        }
        
    };
private string? GetIconDataUrl(string packageName)
{
    if (IconDataUrls.TryGetValue(packageName, out var cachedUrl))
        return string.IsNullOrEmpty(cachedUrl) ? null : cachedUrl;

#if ANDROID
    var base64Icon = Planapp.Platforms.Android.UsageStatsHelper.GetAppIcon(packageName);
    if (!string.IsNullOrEmpty(base64Icon))
    {
        var dataUrl = $"data:image/png;base64,{base64Icon}";
        IconDataUrls.TryAdd(packageName, dataUrl);
        return dataUrl;
    }
    else
    {
        IconDataUrls.TryAdd(packageName, "");
        return null;
    }
#else
    IconDataUrls.TryAdd(packageName, "");
    return null;
#endif
}

    private bool IsIconLoading(string packageName)
    {
        return !IconDataUrls.ContainsKey(packageName);
    }

    private string GetAppInitial(string appName)
    {
        if (string.IsNullOrEmpty(appName)) return "?";
        return appName[0].ToString().ToUpper();
    }
}