@page "/android-usage"
@inject com.usagemeter.androidapp.Services.IUsageStatsService UsageStatsService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Rendering
@using System.Collections.Concurrent

<div class="max-w-7xl mx-auto p-6">
    <!-- Modern Header -->
    <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-3">📱 App Usage Statistics</h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">Track your daily app usage and screen time</p>
    </div>

    @if (!HasPermission)
    {
        <!-- Permission Required -->
        <div class="card p-8 text-center bg-gradient-to-br from-primary-500 to-secondary-500 text-white mb-8">
            <div class="text-4xl mb-4">🔒</div>
            <h3 class="text-xl font-semibold mb-3">Permission Required</h3>
            <p class="mb-6 text-primary-100 max-w-md mx-auto">
                To view your app usage statistics, please grant access to usage data in your device settings.
            </p>
            <button class="btn bg-white text-primary-600 hover:bg-gray-100 btn-lg" @onclick="OpenSettings">
                <span class="text-lg">⚙️</span>
                Grant Permission
            </button>
        </div>
    }
    else if (AppUsages == null)
    {
        <!-- Loading State -->
        <div class="card p-8 text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Loading your usage data...</h3>
            <p class="text-gray-600">This may take a moment</p>
        </div>
    }
    else if (AppUsages.Count == 0)
    {
        <!-- No Data -->
        <div class="card p-8 text-center">
            <div class="text-4xl mb-4">📊</div>
            <h3 class="text-xl font-semibold text-gray-900 mb-3">No Usage Data Available</h3>
            <p class="text-gray-600 mb-6">We couldn't find any app usage data. This might happen because:</p>
            <ul class="text-sm text-gray-600 mb-6 space-y-1 max-w-md mx-auto">
                <li>• No apps were used recently</li>
                <li>• Usage statistics are still being collected</li>
                <li>• Permission was recently granted</li>
            </ul>
            <button class="btn btn-secondary" @onclick="RefreshData">
                <span>🔄</span>
                Refresh Data
            </button>
        </div>
    }
    else
    {
        <!-- Stats Overview -->
        <div class="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            <div class="card p-6 text-center bg-gradient-to-br from-primary-500 to-primary-600 text-white">
                <div class="text-2xl font-bold mb-1">@AppUsages.Count</div>
                <div class="text-sm text-primary-100">Apps Tracked</div>
            </div>
            <div class="card p-6 text-center bg-gradient-to-br from-secondary-500 to-secondary-600 text-white">
                <div class="text-2xl font-bold mb-1">@FormatTimeShort(AppUsages.Sum(a => a.TotalTimeInForeground))</div>
                <div class="text-sm text-secondary-100">Total Screen Time</div>
            </div>
            <div class="card p-6 text-center bg-gradient-to-br from-success-500 to-success-600 text-white">
                <div class="text-2xl font-bold mb-1">@AppUsages.Count(a => a.TotalTimeInForeground > 0)</div>
                <div class="text-sm text-success-100">Apps Used Today</div>
            </div>
            <div class="card p-6 text-center bg-gradient-to-br from-warning-500 to-warning-600 text-white">
                <div class="text-2xl font-bold mb-1">@(AppUsages.Where(a => a.TotalTimeInForeground > 0).Count() > 0 ? "Active" : "Idle")</div>
                <div class="text-sm text-warning-100">Status</div>
            </div>
        </div>

        <!-- Controls -->
        <div class="card p-6 mb-6">
            <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
                <h2 class="text-xl font-semibold text-gray-900 flex items-center gap-2">
                    <span>📈</span>
                    App Usage Breakdown
                </h2>
                
                <div class="flex items-center gap-4">
                    <!-- Filter Toggle -->
                    <label class="flex items-center gap-2 text-sm text-gray-600 cursor-pointer">
                        <input type="checkbox" 
                               class="form-checkbox" 
                               @onchange="OnFilterChanged" 
                               checked="@ShowOnlyUsedApps" />
                        Show only used apps
                    </label>
                    
                    <!-- Refresh Button -->
                    <button class="btn btn-primary" @onclick="RefreshData" disabled="@IsRefreshing">
                        <span class="@(IsRefreshing ? "animate-spin" : "")">🔄</span>
                        @(IsRefreshing ? "Refreshing..." : "Refresh")
                    </button>
                </div>
            </div>
        </div>

        <!-- Apps Grid -->
        @{
            var totalTime = FilteredApps.Sum(a => a.TotalTimeInForeground);
            var maxToShow = 100;
        }
        
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
            @foreach (var app in FilteredApps.Take(maxToShow))
            {
                var percentage = totalTime > 0 ? (double)app.TotalTimeInForeground / totalTime * 100 : 0;
                var isTopApp = FilteredApps.IndexOf(app) < 3 && app.TotalTimeInForeground > 0;
                
                <div class="card p-6 transition-all duration-200 hover:shadow-lg @(isTopApp ? "ring-2 ring-warning-400 bg-gradient-to-br from-warning-50 to-orange-50" : "")" 
                     @key="app.PackageName">
                    
                    <!-- App Header -->
                    <div class="flex items-center gap-4 mb-4">
                        <div class="relative flex-shrink-0">
                            <LazyAppIcon PackageName="@app.PackageName" 
                                        AppName="@app.AppName" 
                                        Size="56" 
                                        EnableLazyLoading="true"
                                        ShowBadge="@isTopApp"
                                        BadgeText="@(isTopApp ? (FilteredApps.Where(a => a.TotalTimeInForeground > 0).ToList().IndexOf(app) + 1).ToString() : "")" />
                        </div>
                        <div class="min-w-0 flex-1">
                            <h3 class="font-semibold text-gray-900 truncate mb-1" title="@app.AppName">@app.AppName</h3>
                            <p class="text-xs text-gray-500 truncate" title="@app.PackageName">@app.PackageName</p>
                        </div>
                    </div>
                    
                    <!-- Usage Stats -->
                    <div class="space-y-3">
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-900 mb-1">@FormatTime(app.TotalTimeInForeground)</div>
                            @if (app.TotalTimeInForeground > 0)
                            {
                                <div class="text-sm text-gray-600 mb-3">@percentage.ToString("F1")% of total time</div>
                                
                                <!-- Progress Bar -->
                                <div class="progress-bar">
                                    <div class="progress-fill @GetProgressColorClass(percentage)" 
                                         style="width: @Math.Max(percentage, 2)%"></div>
                                </div>
                            }
                            else
                            {
                                <div class="text-sm text-gray-500 mb-3">Not used today</div>
                                <div class="progress-bar">
                                    <div class="h-full bg-gray-200 rounded"></div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        
        @if (FilteredApps.Count > maxToShow)
        {
            <div class="card p-6 text-center bg-gray-50">
                <h3 class="font-semibold text-gray-900 mb-2">@(FilteredApps.Count - maxToShow) more apps</h3>
                <p class="text-sm text-gray-600">Showing top @maxToShow apps</p>
            </div>
        }
    }
</div>

<style>
.animate-spin {
    animation: spin 1s linear infinite;
}

.form-checkbox {
    width: 1rem;
    height: 1rem;
    border-radius: 0.25rem;
    border: 1px solid var(--gray-300);
}

.max-w-7xl {
    max-width: 80rem;
}

.mx-auto {
    margin-left: auto;
    margin-right: auto;
}
</style>

@code {
    private List<com.usagemeter.androidapp.Services.AppUsageInfo>? AppUsages;
    private List<com.usagemeter.androidapp.Services.AppUsageInfo> FilteredApps = new();
    private bool HasPermission = false;
    private bool IsRefreshing = false;
    private bool ShowOnlyUsedApps = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        HasPermission = UsageStatsService.HasUsagePermission();
        if (HasPermission)
        {
            AppUsages = await UsageStatsService.GetAppUsageAsync();
            System.Diagnostics.Debug.WriteLine($"Loaded {AppUsages?.Count ?? 0} apps from service");
            FilterApps();
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("No usage permission granted");
        }
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        ShowOnlyUsedApps = (bool)(e.Value ?? false);
        FilterApps();
    }

    private void FilterApps()
    {
        if (AppUsages == null) return;

        FilteredApps = ShowOnlyUsedApps 
            ? AppUsages.Where(a => a.TotalTimeInForeground > 0).ToList()
            : AppUsages;
        
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        IsRefreshing = true;
        AppUsages = null;
        FilteredApps.Clear();
        StateHasChanged();
        
        await Task.Delay(500);
        await LoadData();
        IsRefreshing = false;
        StateHasChanged();
    }

    void OpenSettings()
    {
        UsageStatsService.RequestUsageAccess();
    }

    string GetProgressColorClass(double percentage)
    {
        return percentage switch
        {
            >= 30 => "bg-gradient-to-r from-error-500 to-error-600",
            >= 15 => "bg-gradient-to-r from-warning-500 to-warning-600", 
            >= 5 => "bg-gradient-to-r from-primary-500 to-primary-600",
            _ => "bg-gradient-to-r from-success-500 to-success-600"
        };
    }

    string FormatTime(long milliseconds)
    {
        if (milliseconds <= 0) return "0s";
        
        var time = TimeSpan.FromMilliseconds(milliseconds);
        var parts = new List<string>();
        
        if (time.TotalDays >= 1)
        {
            var days = (int)time.TotalDays;
            parts.Add($"{days}d");
            time = time.Subtract(TimeSpan.FromDays(days));
        }
        
        if (time.Hours > 0) parts.Add($"{time.Hours}h");
        if (time.Minutes > 0) parts.Add($"{time.Minutes}m");
        if (time.Seconds > 0 && parts.Count == 0) parts.Add($"{time.Seconds}s");
        
        return parts.Count > 0 ? string.Join(" ", parts) : "0s";
    }

    string FormatTimeShort(long milliseconds)
    {
        if (milliseconds <= 0) return "0s";
        
        var time = TimeSpan.FromMilliseconds(milliseconds);
        
        if (time.TotalHours >= 1)
            return $"{time.TotalHours:F1}h";
        else if (time.TotalMinutes >= 1)
            return $"{(int)time.TotalMinutes}m";
        else
            return $"{(int)time.TotalSeconds}s";
    }
}