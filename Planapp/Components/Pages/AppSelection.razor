@page "/rules/select-apps/{RuleId}"
@page "/rules/select-target/{RuleId}"
@inject com.usagemeter.androidapp.Services.IRuleService RuleService
@inject NavigationManager Navigation
@using com.usagemeter.androidapp.Models

<div class="max-w-6xl mx-auto p-6">
    <!-- Modern Header -->
    <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-3">
            @if (IsTargetSelection)
            {
                <span>🎯 Select Target App</span>
            }
            else
            {
                <span>📱 Select Apps to Monitor</span>
            }
        </h1>
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">
            @if (IsTargetSelection)
            {
                <span>Choose which app to open when the rule triggers</span>
            }
            else
            {
                <span>Choose which apps to monitor for this rule</span>
            }
        </p>
    </div>

    <!-- Modern Controls -->
    <div class="card p-6 mb-6">
        <div class="flex flex-col lg:flex-row gap-4 items-center justify-between">
            <!-- Search -->
            <div class="relative flex-1 max-w-md">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span class="text-gray-400">🔍</span>
                </div>
                <input type="text"
                       class="form-input pl-10"
                       placeholder="Search apps..."
                       @bind="SearchQuery"
                       @oninput="OnSearchChanged" />
            </div>

            <!-- Selection Info -->
            @if (!IsTargetSelection)
            {
                <div class="flex items-center gap-4">
                    <div class="flex items-center gap-2">
                        <span class="badge badge-primary text-base px-3 py-1">
                            @SelectedApps.Count selected
                        </span>
                        @if (SelectedApps.Count > 0)
                        {
                            <button class="btn btn-secondary btn-sm" @onclick="ClearSelection">
                                Clear All
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Loading State -->
    @if (IsLoading)
    {
        <div class="card p-8 text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Loading...</h3>
            <p class="text-gray-600">@LoadingMessage</p>
        </div>
    }
    else if (HasError)
    {
        <div class="card p-8 text-center bg-error-50 border-error-200">
            <div class="text-4xl mb-4">❌</div>
            <h3 class="text-xl font-semibold text-error-900 mb-2">Error Loading</h3>
            <p class="text-error-700 mb-4">@ErrorMessage</p>
            <button class="btn btn-error" @onclick="RetryLoad">Retry</button>
        </div>
    }
    else if (Apps == null)
    {
        <div class="card p-8 text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Loading apps...</h3>
            <p class="text-gray-600">This may take a moment</p>
        </div>
    }
    else if (FilteredApps.Count == 0)
    {
        <div class="card p-8 text-center">
            <div class="text-4xl mb-4">📱</div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">No Apps Found</h3>
            @if (!string.IsNullOrEmpty(SearchQuery))
            {
                <p class="text-gray-600 mb-4">No apps match your search for "@SearchQuery"</p>
                <button class="btn btn-secondary" @onclick="ClearSearch">Clear Search</button>
            }
            else
            {
                <p class="text-gray-600">No apps could be loaded from your device</p>
            }
        </div>
    }
    else
    {
        <!-- Apps Grid -->
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4 mb-8">
            @foreach (var app in FilteredApps)
            {
                var isSelected = IsTargetSelection ? (SelectedTargetApp == app.PackageName) : SelectedApps.Contains(app.PackageName);

                <div class="card p-4 cursor-pointer transition-all duration-200 hover:shadow-lg @(isSelected ? "ring-2 ring-primary-500 bg-primary-50" : "hover:bg-gray-50")"
                     @onclick="() => ToggleApp(app)">

                    <!-- App Icon with Badge -->
                    <div class="relative mb-3 flex justify-center">
                        <LazyAppIcon PackageName="@app.PackageName"
                                     AppName="@app.AppName"
                                     Size="56"
                                     EnableLazyLoading="true"
                                     ShowBadge="@isSelected"
                                     BadgeText="@(IsTargetSelection ? "🎯" : "✓")" />
                    </div>

                    <!-- App Details -->
                    <div class="text-center">
                        <h3 class="font-semibold text-gray-900 text-sm mb-1 line-clamp-2" title="@app.AppName">
                            @app.AppName
                        </h3>
                        <p class="text-xs text-gray-500 truncate" title="@app.PackageName">
                            @app.PackageName
                        </p>
                    </div>

                    <!-- Selection Indicator -->
                    @if (isSelected)
                    {
                        <div class="mt-2 text-center">
                            @if (IsTargetSelection)
                            {
                                <span class="badge badge-warning">Target App</span>
                            }
                            else
                            {
                                <span class="badge badge-success">Selected</span>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }

    <!-- Bottom Actions -->
    <div class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg">
        <div class="max-w-6xl mx-auto flex justify-between items-center gap-4">
            <button class="btn btn-secondary" @onclick="Cancel">
                Cancel
            </button>

            <div class="flex items-center gap-3">
                @if (!IsTargetSelection && SelectedApps.Count > 0)
                {
                    <span class="text-sm text-gray-600">
                        @SelectedApps.Count app@(SelectedApps.Count == 1 ? "" : "s") selected
                    </span>
                }
                @if (IsTargetSelection && !string.IsNullOrEmpty(SelectedTargetApp))
                {
                    <span class="text-sm text-gray-600">
                        Target app selected
                    </span>
                }

                <button class="btn btn-primary btn-lg"
                        @onclick="SaveSelection"
                        disabled="@(!IsSelectionValid || IsLoading)">
                    <span class="text-lg">✅</span>
                    @if (IsTargetSelection)
                    {
                        <span>Set as Target</span>
                    }
                    else
                    {
                        <span>Add @SelectedApps.Count App@(SelectedApps.Count == 1 ? "" : "s")</span>
                    }
                </button>
            </div>
        </div>
    </div>

    <!-- Bottom Spacer for Fixed Actions -->
    <div class="h-20"></div>
</div>

<style>
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .max-w-6xl {
        max-width: 72rem;
    }

    .mx-auto {
        margin-left: auto;
        margin-right: auto;
    }
</style>

@code {
    [Parameter] public string RuleId { get; set; } = "";

    private List<AppInfo>? Apps;
    private List<AppInfo> FilteredApps = new();
    private HashSet<string> SelectedApps = new();
    private string SelectedTargetApp = "";
    private string SearchQuery = "";
    private AppRule? CurrentRule;
    private bool IsLoading = true;
    private bool HasError = false;
    private string LoadingMessage = "Loading rule...";
    private string ErrorMessage = "";

    private bool IsTargetSelection => Navigation.Uri.Contains("/select-target/");
    private bool IsSelectionValid => IsTargetSelection ? !string.IsNullOrEmpty(SelectedTargetApp) : SelectedApps.Count > 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCurrentRule();
            if (CurrentRule != null)
            {
                LoadingMessage = "Loading apps...";
                await LoadApps();
                InitializeSelection();
                FilterApps();
            }
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = "Failed to load data. Please try again.";
            System.Diagnostics.Debug.WriteLine($"Error in AppSelection: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCurrentRule()
    {
        try
        {
            var rules = await RuleService.GetRulesAsync();
            CurrentRule = rules.FirstOrDefault(r => r.Id == RuleId);

            if (CurrentRule == null)
            {
                HasError = true;
                ErrorMessage = "Rule not found. Please make sure to save the rule with a name first.";
            }
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = "Failed to load rule data.";
            System.Diagnostics.Debug.WriteLine($"Error loading rule: {ex}");
        }
    }

    private async Task LoadApps()
    {
        try
        {
            Apps = await RuleService.GetAllAppsAsync();
            FilteredApps = Apps?.ToList() ?? new List<AppInfo>();
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = "Failed to load apps from your device.";
            System.Diagnostics.Debug.WriteLine($"Error loading apps: {ex}");
        }
    }

    private void InitializeSelection()
    {
        if (CurrentRule == null) return;

        if (IsTargetSelection)
        {
            SelectedTargetApp = CurrentRule.TargetPackage ?? "";
        }
        else
        {
            SelectedApps = new HashSet<string>(CurrentRule.SelectedPackages ?? new List<string>());
        }
    }

    private void ToggleApp(AppInfo app)
    {
        if (IsTargetSelection)
        {
            SelectedTargetApp = SelectedTargetApp == app.PackageName ? "" : app.PackageName;
        }
        else
        {
            if (SelectedApps.Contains(app.PackageName))
            {
                SelectedApps.Remove(app.PackageName);
            }
            else
            {
                SelectedApps.Add(app.PackageName);
            }
        }
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? "";
        FilterApps();
    }

    private void FilterApps()
    {
        if (Apps == null) return;

        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            FilteredApps = Apps.ToList();
        }
        else
        {
            var query = SearchQuery.ToLower();
            FilteredApps = Apps.Where(app =>
                app.AppName.ToLower().Contains(query) ||
                app.PackageName.ToLower().Contains(query)
            ).ToList();
        }
        StateHasChanged();
    }

    private void ClearSelection()
    {
        if (IsTargetSelection)
        {
            SelectedTargetApp = "";
        }
        else
        {
            SelectedApps.Clear();
        }
        StateHasChanged();
    }

    private void ClearSearch()
    {
        SearchQuery = "";
        FilterApps();
    }

    private async Task RetryLoad()
    {
        HasError = false;
        IsLoading = true;
        ErrorMessage = "";
        StateHasChanged();

        await OnInitializedAsync();
    }

    private async Task SaveSelection()
    {
        if (CurrentRule == null || IsLoading) return;

        try
        {
            if (IsTargetSelection)
            {
                if (!string.IsNullOrEmpty(SelectedTargetApp))
                {
                    CurrentRule.TargetPackage = SelectedTargetApp;
                    var targetApp = Apps?.FirstOrDefault(a => a.PackageName == SelectedTargetApp);
                    CurrentRule.TargetAppName = targetApp?.AppName ?? SelectedTargetApp;
                }
            }
            else
            {
                CurrentRule.SelectedPackages = SelectedApps.ToList();
                CurrentRule.SelectedAppNames = Apps?.Where(a => SelectedApps.Contains(a.PackageName))
                                                    .Select(a => a.AppName)
                                                    .ToList() ?? new List<string>();
            }

            await RuleService.SaveRuleAsync(CurrentRule);
            Navigation.NavigateTo($"/rules/edit/{RuleId}");
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = "Failed to save selection. Please try again.";
            System.Diagnostics.Debug.WriteLine($"Error saving selection: {ex}");
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/rules/edit/{RuleId}");
    }
}