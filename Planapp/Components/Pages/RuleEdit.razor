@page "/rules/edit/{RuleId}"
@inject com.usagemeter.androidapp.Services.IRuleService RuleService
@inject NavigationManager Navigation
@using com.usagemeter.androidapp.Models

<div class="page-header">
    <h1>@(IsNewRule ? "➕ Create New Rule" : "✏️ Edit Rule")</h1>
    <p class="page-subtitle">Set up your app usage limits and actions</p>
</div>

@if (CurrentRule == null)
{
    <div class="loading-card">
        <div class="loading-spinner"></div>
        <h3>Loading...</h3>
    </div>
}
else
{
    <div class="rule-form">
        <div class="form-section">
            <label class="form-label">Rule Name</label>
            <input type="text" class="form-input" @bind="CurrentRule.Name" placeholder="Enter a name for this rule" />
        </div>

        <div class="form-section">
            <label class="form-label">Selected Apps (@CurrentRule.SelectedPackages.Count selected)</label>
            <div class="app-selection-preview">
                @if (CurrentRule.SelectedAppNames.Count > 0)
                {
                    <div class="selected-apps">
                        @foreach (var appName in CurrentRule.SelectedAppNames.Take(5))
                        {
                            <span class="app-chip">@appName</span>
                        }
                        @if (CurrentRule.SelectedAppNames.Count > 5)
                        {
                            <span class="app-chip more">+@(CurrentRule.SelectedAppNames.Count - 5) more</span>
                        }
                    </div>
                }
                else
                {
                    <p class="no-apps-selected">No apps selected</p>
                }
                <button type="button" class="btn btn-secondary" @onclick="OpenAppSelection" disabled="@string.IsNullOrWhiteSpace(CurrentRule.Name)">
                    <span class="btn-icon">📱</span>
                    Select Apps
                </button>
                @if (string.IsNullOrWhiteSpace(CurrentRule.Name))
                {
                    <p class="helper-text">Please enter a rule name first</p>
                }
            </div>
        </div>

        <div class="form-section">
            <label class="form-label">Time Limit</label>
            <div class="time-inputs">
                <div class="time-input-group">
                    <input type="number" class="form-input-small" @bind="CurrentRule.ThresholdHours" min="0" max="23" />
                    <span class="time-label">hours</span>
                </div>
                <div class="time-input-group">
                    <input type="number" class="form-input-small" @bind="CurrentRule.ThresholdMinutes" min="0" max="59" />
                    <span class="time-label">minutes</span>
                </div>
            </div>
        </div>

        <div class="form-section">
            <label class="form-label">Action when limit is reached</label>
            <div class="action-selection">
                <div class="radio-option @(CurrentRule.ActionType == "Timer" ? "selected" : "")" @onclick="@(() => SetActionType("Timer"))">
                    <input type="radio" name="actionType" value="Timer" checked="@(CurrentRule.ActionType == "Timer")" />
                    <div class="radio-content">
                        <span class="radio-icon">⏱️</span>
                        <div class="radio-text-content">
                            <span class="radio-text">Show countdown timer</span>
                            <span class="radio-description">Block app with a timer before allowing access</span>
                        </div>
                    </div>
                </div>

                <div class="radio-option @(CurrentRule.ActionType == "Instant" ? "selected" : "")" @onclick="@(() => SetActionType("Instant"))">
                    <input type="radio" name="actionType" value="Instant" checked="@(CurrentRule.ActionType == "Instant")" />
                    <div class="radio-content">
                        <span class="radio-icon">🚫</span>
                        <div class="radio-text-content">
                            <span class="radio-text">Block immediately</span>
                            <span class="radio-description">Close app instantly and go to home screen</span>
                        </div>
                    </div>
                </div>

                <div class="radio-option @(CurrentRule.ActionType == "OpenApp" ? "selected" : "")" @onclick="@(() => SetActionType("OpenApp"))">
                    <input type="radio" name="actionType" value="OpenApp" checked="@(CurrentRule.ActionType == "OpenApp")" />
                    <div class="radio-content">
                        <span class="radio-icon">🚀</span>
                        <div class="radio-text-content">
                            <span class="radio-text">Redirect to specific app</span>
                            <span class="radio-description">Close current app and open a productive alternative</span>
                        </div>
                    </div>
                </div>

                <div class="radio-option @(CurrentRule.ActionType == "Choice" ? "selected" : "")" @onclick="@(() => SetActionType("Choice"))">
                    <input type="radio" name="actionType" value="Choice" checked="@(CurrentRule.ActionType == "Choice")" />
                    <div class="radio-content">
                        <span class="radio-icon">🤔</span>
                        <div class="radio-text-content">
                            <span class="radio-text">Give me options</span>
                            <span class="radio-description">Show multiple choices when limit is reached</span>
                        </div>
                    </div>
                </div>
            </div>

            @if (CurrentRule.ActionType == "OpenApp")
            {
                <div class="target-app-selection">
                    <label class="form-label">Target app to open</label>
                    @if (!string.IsNullOrEmpty(CurrentRule.TargetAppName))
                    {
                        <div class="selected-target-app">
                            <span class="app-chip target">@CurrentRule.TargetAppName</span>
                        </div>
                    }
                    else
                    {
                        <p class="no-target-app">No target app selected</p>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="OpenTargetAppSelection" disabled="@string.IsNullOrWhiteSpace(CurrentRule.Name)">
                        <span class="btn-icon">🎯</span>
                        Select Target App
                    </button>
                    @if (string.IsNullOrWhiteSpace(CurrentRule.Name))
                    {
                        <p class="helper-text">Please enter a rule name first</p>
                    }
                </div>
            }
        </div>

        <div class="form-section">
            <div class="toggle-container" @onclick="ToggleEnabled">
                <input type="checkbox" @bind="CurrentRule.IsEnabled" />
                <span class="toggle-slider"></span>
                <span class="toggle-label">Enable this rule</span>
            </div>
        </div>

        <div class="form-actions">
            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                Cancel
            </button>
            <button type="button" class="btn btn-primary" @onclick="SaveRule" disabled="@(!IsFormValid)">
                <span class="btn-icon">💾</span>
                @(IsNewRule ? "Create Rule" : "Update Rule")
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public string RuleId { get; set; } = "";

    private AppRule? CurrentRule;
    private bool IsNewRule => RuleId == "new";

    private bool IsFormValid =>
        CurrentRule != null &&
        !string.IsNullOrWhiteSpace(CurrentRule.Name) &&
        CurrentRule.SelectedPackages.Count > 0 &&
        (CurrentRule.ActionType != "OpenApp" || !string.IsNullOrEmpty(CurrentRule.TargetPackage));

    protected override async Task OnInitializedAsync()
    {
        if (IsNewRule)
        {
            CurrentRule = new AppRule
                {
                    Name = "",
                    ThresholdHours = 1,
                    ThresholdMinutes = 0,
                    ActionType = "Timer", // Default to Timer instead of deprecated LockInApp
                    IsEnabled = true
                };
        }
        else
        {
            var rules = await RuleService.GetRulesAsync();
            CurrentRule = rules.FirstOrDefault(r => r.Id == RuleId);

            if (CurrentRule == null)
            {
                Navigation.NavigateTo("/rules");
                return;
            }

            // Migrate old action types
            if (CurrentRule.ActionType == "LockInApp")
            {
                CurrentRule.ActionType = "Timer";
            }
        }
    }

    private void SetActionType(string actionType)
    {
        if (CurrentRule != null)
        {
            CurrentRule.ActionType = actionType;
            StateHasChanged();
        }
    }

    private async Task OpenAppSelection()
    {
        if (CurrentRule == null || string.IsNullOrWhiteSpace(CurrentRule.Name)) return;

        // Save the rule first (even if incomplete) so it exists when AppSelection tries to load it
        await RuleService.SaveRuleAsync(CurrentRule);

        Navigation.NavigateTo($"/rules/select-apps/{CurrentRule.Id}");
    }

    private async Task OpenTargetAppSelection()
    {
        if (CurrentRule == null || string.IsNullOrWhiteSpace(CurrentRule.Name)) return;

        // Save the rule first (even if incomplete) so it exists when AppSelection tries to load it
        await RuleService.SaveRuleAsync(CurrentRule);

        Navigation.NavigateTo($"/rules/select-target/{CurrentRule.Id}");
    }

    private async Task SaveRule()
    {
        if (CurrentRule == null || !IsFormValid) return;

        await RuleService.SaveRuleAsync(CurrentRule);
        Navigation.NavigateTo("/rules");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/rules");
    }

    private void ToggleEnabled()
    {
        if (CurrentRule != null)
        {
            CurrentRule.IsEnabled = !CurrentRule.IsEnabled;
            StateHasChanged();
        }
    }
}