@page "/rules"
@inject com.usagemeter.androidapp.Services.IRuleService RuleService
@inject NavigationManager Navigation
@using com.usagemeter.androidapp.Models

<div class="max-w-7xl mx-auto p-6">
    <!-- Modern Header -->
    <div class="flex flex-col lg:flex-row items-center justify-between gap-6 mb-8">
        <div class="text-center lg:text-left">
            <h1 class="text-3xl font-bold text-gray-900 mb-3">📋 App Usage Rules</h1>
            <p class="text-lg text-gray-600">Manage your app time limits and actions</p>
        </div>

        <div class="flex items-center gap-4">
            <button class="btn btn-primary btn-lg" @onclick="CreateNewRule">
                <span class="text-lg">➕</span>
                Create New Rule
            </button>
            <button class="btn btn-secondary" @onclick="RefreshRules" disabled="@IsRefreshing">
                <span class="@(IsRefreshing ? "animate-spin" : "")">🔄</span>
                @(IsRefreshing ? "Refreshing..." : "Refresh")
            </button>
        </div>
    </div>

    @if (RulesList == null)
    {
        <!-- Loading State -->
        <div class="card p-8 text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">Loading rules...</h3>
        </div>
    }
    else if (RulesList.Count == 0)
    {
        <!-- Empty State -->
        <div class="card p-12 text-center bg-gradient-to-br from-primary-50 to-secondary-50">
            <div class="text-6xl mb-6">📜</div>
            <h3 class="text-2xl font-semibold text-gray-900 mb-4">No Rules Created</h3>
            <p class="text-gray-600 mb-8 max-w-md mx-auto">
                Create your first app usage rule to get started with time management!
            </p>
            <button class="btn btn-primary btn-xl" @onclick="CreateNewRule">
                <span class="text-xl">➕</span>
                Create First Rule
            </button>
        </div>
    }
    else
    {
        <!-- Rules Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            @foreach (var rule in RulesList)
            {
                <div class="card p-6 transition-all duration-200 hover:shadow-lg @(rule.IsEnabled ? "" : "opacity-75")">
                    <!-- Rule Header -->
                    <div class="flex items-start justify-between gap-4 mb-4">
                        <div class="min-w-0 flex-1">
                            <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">@rule.Name</h3>
                            <div class="flex items-center gap-2">
                                @if (rule.IsEnabled)
                                {
                                    <span class="badge badge-success">✅ Active</span>
                                }
                                else
                                {
                                    <span class="badge badge-warning">⏸️ Paused</span>
                                }
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex items-center gap-1">
                            <button class="btn-icon" @onclick="() => EditRule(rule.Id)" title="Edit">
                                ✏️
                            </button>
                            <button class="btn-icon" @onclick="() => ToggleRule(rule)" title="@(rule.IsEnabled ? "Disable" : "Enable")">
                                @(rule.IsEnabled ? "⏸️" : "▶️")
                            </button>
                            <button class="btn-icon btn-icon-danger" @onclick="() => DeleteRule(rule.Id)" title="Delete">
                                🗑️
                            </button>
                        </div>
                    </div>

                    <!-- Rule Details -->
                    <div class="space-y-4">
                        <!-- Apps -->
                        <div>
                            <div class="text-sm font-medium text-gray-700 mb-2">Monitored Apps:</div>
                            @if (rule.SelectedAppNames.Count > 0)
                            {
                                <div class="flex flex-wrap gap-1">
                                    @foreach (var appName in rule.SelectedAppNames.Take(3))
                                    {
                                        <span class="badge bg-gray-100 text-gray-700 text-xs">@appName</span>
                                    }
                                    @if (rule.SelectedAppNames.Count > 3)
                                    {
                                        <span class="badge bg-gray-200 text-gray-600 text-xs">+@(rule.SelectedAppNames.Count - 3) more</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <span class="text-sm text-gray-500 italic">No apps selected</span>
                            }
                        </div>

                        <!-- Time Limit -->
                        <div>
                            <div class="text-sm font-medium text-gray-700 mb-1">Time Limit:</div>
                            <div class="text-lg font-semibold text-primary-600">
                                @if (rule.ThresholdHours > 0)
                                {
                                    <span>@rule.ThresholdHours h @rule.ThresholdMinutes m</span>
                                }
                                else
                                {
                                    <span>@rule.ThresholdMinutes minutes</span>
                                }
                            </div>
                        </div>

                        <!-- Action -->
                        <div>
                            <div class="text-sm font-medium text-gray-700 mb-2">Action:</div>
                            <div class="flex items-center gap-2">
                                <span class="@GetActionIconClass(rule.ActionType)">@GetActionIcon(rule.ActionType)</span>
                                <span class="text-sm text-gray-600">@GetActionDescription(rule)</span>
                            </div>
                        </div>

                        <!-- Usage Status -->
                        @if (rule.SelectedPackages.Count > 0)
                        {
                            <div>
                                <div class="text-sm font-medium text-gray-700 mb-2">Today's Usage:</div>
                                @if (UsageData.TryGetValue(rule.Id, out var usage))
                                {
                                    <div class="flex items-center justify-between">
                                        <span class="text-lg font-semibold @(usage >= rule.ThresholdInMilliseconds ? "text-error-600" : "text-success-600")">
                                            @FormatTime(usage)
                                        </span>
                                        @if (usage >= rule.ThresholdInMilliseconds)
                                        {
                                            <span class="badge badge-error">⚠️ Limit Exceeded</span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-success">✅ Within Limit</span>
                                        }
                                    </div>

                                    <!-- Progress Bar -->
                                    <div class="mt-2">
                                        <div class="progress-bar">
                                            <div class="h-full rounded transition-all duration-300 @(usage >= rule.ThresholdInMilliseconds ? "bg-gradient-to-r from-error-500 to-error-600" : "bg-gradient-to-r from-success-500 to-success-600")"
                                                 style="width: @Math.Min((usage / (double)rule.ThresholdInMilliseconds) * 100, 100)%"></div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="flex items-center gap-2">
                                        <div class="loading-skeleton h-4 w-16 rounded"></div>
                                        <span class="text-xs text-gray-500">Loading...</span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .btn-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2rem;
        height: 2rem;
        border: none;
        border-radius: 0.375rem;
        background: var(--gray-100);
        color: var(--gray-600);
        cursor: pointer;
        transition: all var(--transition-fast);
    }

        .btn-icon:hover {
            background: var(--gray-200);
            color: var(--gray-700);
        }

    .btn-icon-danger:hover {
        background: var(--error-100);
        color: var(--error-600);
    }

    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .animate-spin {
        animation: spin 1s linear infinite;
    }

    .max-w-7xl {
        max-width: 80rem;
    }

    .mx-auto {
        margin-left: auto;
        margin-right: auto;
    }
</style>

@code {
    private List<AppRule>? RulesList;
    private bool IsRefreshing = false;
    private Dictionary<string, long> UsageData = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRules();
        await LoadUsageData();
    }

    private async Task LoadRules()
    {
        RulesList = await RuleService.GetRulesAsync();

        // Migrate legacy action types
        if (RulesList != null)
        {
            bool needsUpdate = false;
            foreach (var rule in RulesList)
            {
                if (rule.ActionType == "LockInApp")
                {
                    rule.ActionType = "Timer";
                    needsUpdate = true;
                }
            }

            if (needsUpdate)
            {
                foreach (var rule in RulesList.Where(r => r.ActionType == "Timer"))
                {
                    await RuleService.SaveRuleAsync(rule);
                }
            }
        }

        StateHasChanged();
    }

    private async Task LoadUsageData()
    {
        if (RulesList == null) return;

        foreach (var rule in RulesList)
        {
            if (rule.SelectedPackages.Count > 0)
            {
                var usage = await RuleService.GetCombinedUsageForAppsAsync(rule.SelectedPackages);
                UsageData[rule.Id] = usage;
            }
        }
        StateHasChanged();
    }

    private async Task RefreshRules()
    {
        IsRefreshing = true;
        await LoadRules();
        await LoadUsageData();
        IsRefreshing = false;
    }

    private void CreateNewRule()
    {
        Navigation.NavigateTo("/rules/edit/new");
    }

    private void EditRule(string ruleId)
    {
        Navigation.NavigateTo($"/rules/edit/{ruleId}");
    }

    private async Task ToggleRule(AppRule rule)
    {
        rule.IsEnabled = !rule.IsEnabled;
        await RuleService.SaveRuleAsync(rule);
        StateHasChanged();
    }

    private async Task DeleteRule(string ruleId)
    {
        await RuleService.DeleteRuleAsync(ruleId);
        await LoadRules();
    }

    private string GetActionDescription(AppRule rule)
    {
        return rule.ActionType switch
        {
            "Timer" => "Show countdown timer",
            "Instant" => "Block immediately",
            "OpenApp" => !string.IsNullOrEmpty(rule.TargetAppName) ? $"Open {rule.TargetAppName}" : "Open target app",
            "Choice" => "Show options",
            "LockInApp" => "Show countdown timer", // Legacy support
            _ => "Unknown action"
        };
    }

    private string GetActionIcon(string actionType)
    {
        return actionType switch
        {
            "Timer" => "⏱️",
            "Instant" => "🚫",
            "OpenApp" => "🚀",
            "Choice" => "🤔",
            "LockInApp" => "⏱️", // Legacy support
            _ => "❓"
        };
    }

    private string GetActionIconClass(string actionType)
    {
        return actionType switch
        {
            "Timer" => "text-primary-500",
            "Instant" => "text-error-500",
            "OpenApp" => "text-success-500",
            "Choice" => "text-warning-500",
            "LockInApp" => "text-primary-500", // Legacy support
            _ => "text-gray-500"
        };
    }

    private string FormatTime(long milliseconds)
    {
        if (milliseconds <= 0) return "0m";

        var time = TimeSpan.FromMilliseconds(milliseconds);
        var parts = new List<string>();

        if (time.TotalDays >= 1)
        {
            var days = (int)time.TotalDays;
            parts.Add($"{days}d");
            time = time.Subtract(TimeSpan.FromDays(days));
        }

        if (time.Hours > 0) parts.Add($"{time.Hours}h");
        if (time.Minutes > 0) parts.Add($"{time.Minutes}m");
        if (parts.Count == 0 && time.Seconds > 0) parts.Add($"{time.Seconds}s");

        return parts.Count > 0 ? string.Join(" ", parts) : "0m";
    }
}